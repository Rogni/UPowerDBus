/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp upower.xml -p UPowerDisplayDeviceInterface --no-namespaces
 *
 * qdbusxml2cpp is Copyright (C) 2019 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QDBUSFREEDESKTOPINTERFACEMANAGER_H
#define QDBUSFREEDESKTOPINTERFACEMANAGER_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

#include <QDebug>

class QDBusFreedesktopInterfaceManager: public QDBusAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.DBus.Properties"; }

    class Delegate {
    public:
        Delegate(QString interfaceName);
        virtual ~Delegate();
        QString interfaceName() const;
        virtual void onPropertiesChanged(QVariantMap changed_properties, QStringList invalidated_properties);
    private:
        QString m_interfaceName;
    };

    void addDelegate(Delegate* delegate);
    void removeDelegate(Delegate* delegate);

public:
    QDBusFreedesktopInterfaceManager(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);
    ~QDBusFreedesktopInterfaceManager();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusVariant> Get(const QString &interface_name, const QString &property_name)
    {

        qDebug () << "Get" << interface_name << property_name;
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name) << QVariant::fromValue(property_name);
        return asyncCallWithArgumentList(QStringLiteral("Get"), argumentList);
    }

    inline QDBusPendingReply<> GetAll(const QString &interface_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name);
        return asyncCallWithArgumentList(QStringLiteral("GetAll"), argumentList);
    }

    inline QDBusPendingReply<> Set(const QString &interface_name, const QString &property_name, const QVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name);
        argumentList << QVariant::fromValue(property_name);
        argumentList << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("Set"), argumentList);
    }

private slots:
    void onPropertiesChanged(const QString &interface_name, QVariantMap changed_properties, QStringList invalidated_properties);

Q_SIGNALS: // SIGNALS
    void PropertiesChanged(const QString &interface_name, QVariantMap changed_properties, QStringList invalidated_properties);


private:
    QMultiMap<QString, Delegate*> m_delegates;
};

#endif
